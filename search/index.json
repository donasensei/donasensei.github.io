[{"content":"Discrete Mathematics and Its Applications - Eighth Edition을 기준으로 작성.\n Propositional Function 예를 들어 \u0026ldquo;$x$ is greather than 3\u0026quot;라는 명제가 있다고 하면 이는 True인가 False인가. 이 경우, variable(변수)와 predicate(술어)에 관한 정보가 필요하다.\n위 예시를 명제 함수로 표현하면 $P(x) =$ \u0026ldquo;$x$ is greather than 3\u0026rdquo; 처럼 표현하고\n$P(x)$가 명제 함수, $x$가 변수, $P$가 술어가 된다.\n만약 $x=6$라면 $P(x)$는 True가 되고 $x=2$라면 $P(x)$는 False가 된다.\n즉, $x$의 domain(정의역)이 \u0026lsquo;4 이상인 모든 실수\u0026rsquo;라면, $P(x)$는 True이다.\n여기서 변수 $x$에 값이 할당되거나 한정자가 적용되면, $x$를 bound variables(종속 변수)라고 한다.\n$x$에 값이 할당되지 않았거나 한정자가 적용되지 않은 경우에는 $x$를 free variables(자유 변수)라고 한다.\nQuantifiers(한정자) 한정 기호는 두 종류가 있다.\n Universal Quantifier($∀$)  $∀xP(x)$ asserts $P(x)$ is true for every $x$ in the domain. 정의역에 속하는 모든 $x$에 대해 $P(x)$는 참이다.   Existential Quantifier($∃$)  $∃xP(x)$ asserts $P(x)$ is true for some $x$ in the domain. 정의역에 속하는 적어도 하나의 값 $x$에 대해 $P(x)$는 참이다.    한정자가 적용되는 부분을 한정자의 scope(범위)라고 한다.\nUniversal Quantifier 만일 정의역의 모든 값을 $x_1, x_2, x_3, \u0026hellip;, x_n$처럼 나열할 수 있을 경우,\n$∀xP(x)$는 $P(x_1)∧P(x_2)∧P(x_3)∧\u0026hellip;∧P(x_n)$와 동일하다.\n$U$를 정의역이라 하고 만약 $P(x)$가 $x\u0026gt;0$이고 $U$가 $ℤ$라면 False이다.\n$U$를 정의역이라 하고 만약 $P(x)$가 $x\u0026gt;0$이고 $U$가 $ℤ^+$라면 True이다.\nℤ는 정수의 집합이다.\nExistential Quantifier 만일 정의역의 모든 값을 $x_1, x_2, x_3, \u0026hellip;, x_n$처럼 나열할 수 있을 경우,\n$∀xP(x)$는 $P(x_1)∨P(x_2)∨P(x_3)∨\u0026hellip;∨P(x_n)$와 동일하다.\n$U$를 정의역이라 하고 만약 $P(x)$가 $x\u0026gt;0$이고 $U$가 $ℤ$라면 True이다. 이 경우, $U$가 $ℤ^+$라도 True이다.\n그러나 $U$를 정의역이라 하고 만약 $P(x)$가 $x\u0026gt;0$이고 $U$가 $ℤ^-$라면 False이다.\nCounterexmaple(반례) 반레란 어떤 명제가 참이 아님을 증명하기 위해서 그 명제가 성립하지 않는 예를 든 것을 말한다.\nDomain에 속하는 값 중 단 하나의 값이라도 거짓인 예만 있으면 된다.\n예를 들어 $U$를 정의역이라 하고 만약 $∀P(x)$가 $x^2\u0026gt;0$이고 $U$가 $ℝ$일 때,\n$∀P(x)$의 반례는 if $x=0$, $x^2=0$가 되어 $x^2 \u0026gt; 0$이 된다. 따라서 $∀P(x)$는 거짓이 된다.\nℝ은 실수의 집합이다.\n","date":"2022-03-30T22:08:16Z","permalink":"https://donasensei.github.io/p/discrete-mathmatics-3.-predicates-and-quantifiers%EC%88%A0%EC%96%B4%EC%99%80-%ED%95%9C%EC%A0%95%EC%9E%90/","title":"[Discrete Mathmatics] 3. Predicates and Quantifiers(술어와 한정자)"},{"content":"Discrete Mathematics and Its Applications - Eighth Edition을 기준으로 작성.\n Compound(합성 명제) 합성 명제는 truth value에 따라 세 종류로 나눌 수 있다.\n Tautology(항진명제) Contradiction(모순명제) Contingency(사건명제)   Tautology(항진명제)  A tautology is a proposition which is always true.\n 항상 True값을 가지는 명제를 항진명제라고 한다. $p∨¬p$의 경우 $p$가 $T$일 때 $¬p$는 $F$가 되어 $T∨F$이기 때문에 항상 참이 된다.\n Contradiction(모순명제)  A contradiction is a proposition which is always false.\n 항진명제와 반대로 항상 False값을 가지는 명제를 모순명제라고 한다. $p∧¬p$은 $T∧F$이기 때문에 항상 거짓이다.\n Contingency(사건명제)  A contingency is a proposition which is neither a tautology nor a contradiction, such as p\n 항진명제도, 모순명제도 아닌 명제를 사건명제라고 한다. 정의의 예시처럼 $p$의 경우 $T$도 가능하고 $F$도 가능하기 때문에 사건명제다.\n Logically Equivalent(동치) 그래서 만일 $p↔q$가 항진명제면 p와 q는 논리적으로 동치이고 $p≡q$, $p⇔q$로 나타낸다.\n그리고 진리표에서 열의 값이 동일하면 동치이다. 예를 들면,\n   $p$ $q$ $¬p$ $¬q$ $p → q$ $¬q → ¬p$     T T F F T T   T F F T F F   F T T F T T   F F T T T T    이 진리표에서 $p → q$와 $¬q → ¬p$의 진리값이 같기 때문에 $p → q$와 $¬q → ¬p$는 동치이다.\n논리적 동치법칙    논리적 동치 법칙     $p∧T≡p$\n$p∨F≡p$ Identity Law(항등법칙)   $p∧F≡F$\n$p∨T≡T$ Domination Law(지배법칙)   $p∧¬p=F$\n$p∨¬p=T$ Negation Law(부정법칙)   $¬(¬p)≡p$ Double Negation Law(이중 부정법칙)   $p∧p≡p$\n$p∨p≡p$ Idempotent Law(멱등법칙)   $p∧q≡q∧p$\n$p∨q≡q∨p$ Commutative Law(교환법칙)   $(p∧q)∧r≡p∧(q∧r)$\n$(p∨q)∨r≡p∨(q∨r)$ Associative Law(결합법칙)   $(p∧q)∧r≡p∧(q∧r)$\n$(p∨q)∨r≡p∨(q∨r)$ Distributive Law(분배법칙)   $¬(p∧q)≡¬p∨¬q$\n$¬(p∨q)≡¬p∧¬q$ De Morgan\u0026rsquo;s Law(드 모르간 법칙)   $p∧(p∨q)≡p$\n$p∨(p∧q)≡p$ Absorption Law(흡수법칙)   $p→q≡¬p∨q$ Implication Law(함축법칙)    예로 $¬(p∨(¬p∧q)) ≡ ¬p∧¬q$를 증명하면, \\begin{aligned} ¬(p∨(¬p∧q)) \u0026amp;≡ ¬p∧¬(¬p∧q) \\ \u0026amp;≡ ¬p∧[¬(¬p)∨¬q] \\ \u0026amp;≡ ¬p∧(p∨¬q) \\ \u0026amp;≡ (¬p∧p)∨(¬p∧¬q) \\ \u0026amp;≡ F∨(¬p∧¬q) \\ \u0026amp;≡ (¬p∧¬q)∨F \\ \u0026amp;≡ ¬p∧¬q \\end{aligned}\n한줄씩 따라가보면,\n$¬p∧¬(¬p∧q)$은 드 모르간의 제 2법칙으로 $¬(p∨q)≡¬p∧¬q$를 적용해 $¬p∧¬(¬p∧q)$가 된다.\n$¬p∧¬(¬p∧q)$은 드 모르간의 제 1법칙으로 $¬(p∧q)≡¬p∨¬q$를 적용해 $¬p∧[¬(¬(p)∨¬q]$가 된다.\n$¬p∧[¬(¬(p)∨¬q]$은 이중 부정법칙으로 $¬(¬p)≡p$가 되어 $¬p∧(p∨¬q)$가 된다.\n$¬p∧(p∨¬q)$은 분배법칙으로 괄호 밖에 있는 $¬p∧$를 분배해 $(¬p∧p)∨(¬p∧¬q)$가 된다.\n$(¬p∧p)∨(¬p∧¬q)$에서 $(¬p∧p)$는 항상 거짓이기 때문에(모순명제) $F∨(¬p∧¬q)$가 된다.\n$F∨(¬p∧¬q)$은 논리합에서의 교환법칙에 따라 $(¬p∧¬q)∨F$처럼 바꿔 쓸 수 있다.\n$(¬p∧¬q)∨F$은 항등법칙에 의해 $p∨F≡p$, $¬(p∨(¬p∧q)) ≡ ¬p∧¬q$가 되어 증명이 완료된다.\n","date":"2022-03-29T23:05:59Z","permalink":"https://donasensei.github.io/p/discrete-mathmatics-2.-propositional-equivalences%EB%AA%85%EC%A0%9C-%EB%8F%99%EC%B9%98/","title":"[Discrete Mathmatics] 2. Propositional Equivalences(명제 동치)"},{"content":"$\\mathrm{dB}$ dB(데시벨)은 소리와 소리의 크기 차이를 비교하기 위한 단위이다.\ndB에서 d는 deci는 $×10^{-1} = ×\\frac{1}{10}$을 표현하는 SI 접두어고 B는 Alexander Graham Bell의 이름에서 가져왔다.\n과거 전화는 전선의 저항 때문에 거리가 멀어지면 멀어질수록 신호가 약해져서 일정 간격마다 증폭기를 이용해서 손실된 만큼 다시 증폭을 해주는 방식이였는데 이 기준을 위해 만들어진 것이 dB이다.\n식으로 보면 이렇다. $$\\mathrm{dB} = 10\\log_{10}(\\frac{P}{P_{ref}})$$\n여기서 $P$는 전력이나 소리의 세기의 양이고 $Pref$는 그 기준이다.\n여기에 값들을 대입해보면\n $-3.010 ≈ 10\\log(\\frac{0.5}{1})$ $0 = 10\\log(\\frac{1}{1})$ $3.010 ≈ 10\\log(\\frac{2}{1})$ $10 = 10\\log(\\frac{10}{1})$  이런 식으로 dB을 구할 수 있다. 표로 나타내면 다음과 같다.\n   $\\mathrm{dB}$ 소리의 세기 Loudness     $-6\\mathrm{dB}$ $\\frac{1}{4}$배    $-3\\mathrm{dB}$ $\\frac{1}{2}$배    $0\\mathrm{dB}$ 1배 1배   $10\\mathrm{dB}$ 10배 2배   $20\\mathrm{dB}$ 20배 4배    여기서 Loudness는 인간이 느끼는 음량의 정도를 말한다. 즉 10dB만큼 높아지면 2배 크게 들리는 것이다.\n그렇다고 A라는 소리가 소리 B와 -3dB의 차이가 날 때, A가 B보다 작은 소리인 것은 아니다.\ndB는 두 소리의 크기만 비교할 뿐, Sound Pressure(음압)의 차이는 아니기 때문이다.\n만일 음압을 구하고 싶다면 음압과 세기의 비례는 $\\mathrm{Pressure}^2 ∝ \\mathrm{Intensity}$이기 때문에\n\\begin{aligned} \\mathrm{dB} \u0026amp;= 10\\log(\\frac{P}{P_{ref}}) \\ \u0026amp;= 10\\log_{10}(\\frac{\\frac{P^2}{I}}{\\frac{P_{ref}^2}{I}}) \\ \u0026amp;= 10\\log_{10}(\\frac{P^2}{P_{ref}^{2}}) \\ \u0026amp;= 10\\log_{10}(\\frac{P}{P_{ref}})^2 \\ \u0026amp;= 20\\log_{10}(\\frac{P}{P_{ref}})\n\\end{aligned}\n그리고 공기 중에서의 기준이 되는 크기가 $\\mathrm{dB_{spl}}$이다.\n $\\mathrm{dB_{spl}}$ $\\mathrm{dB_{spl}}$은 Sound Pressure Level(음압 레벨)을 뜻하고 사람이 들을 수 있는 가장 작은 소리의 음압을 기준으로 $0.00020 \\mathrm{dyn/cm^2} = 20μPa$을 절대값으로 한다.\n이를 식으로 표현한 것이 아래의 식이다. $$L_{\\mathrm{dB_{spl}}}/\\mathrm{dB_{spl}} = 20\\log_{10}(\\frac{P}{20μPa})$$\n이 $\\mathrm{dB_{spl}}$이 보통 소음 측정등에서 말하는 데시벨 측정이다. 통상 spl을 생략하여 말하기 때문에 dB와 혼동하는 경우가 많다.\n $\\mathrm{dBm}$ $\\mathrm{dBm}$은 1mW을 기준으로 하는 dB scale이다. 1mW를 기준으로 하긴 하지만 임피던스에 따라 바뀔 수도 있다. 통상, 50Ω이나 75Ω에서 1mW를 0dBm이라고 한다.\n $\\mathrm{dBu}$ $\\mathrm{dBu}$는 $\\mathrm{dBm}$에서 600Ω에서의 1mW를 기준으로 잡는 방식이다. 계산하면, $$V_{ref} = √(1mW × 600Ω) ≈ 0.775V_{rms}$$ 0.775Vrms를 기준점으로 한다.\n $\\mathrm{dBV}$ $\\mathrm{dBV}$는 dBu와 달리 전압이 아닌 절대값인 1V를 Vref로 잡는 방식이다. 식으로 표현하면, $$L\\mathrm{{dBV}} = 20\\log{10}(\\frac{V_1}{V_{ref}})$$\n사실상 식은 크게 바뀌지 않고 기준만 바뀔 뿐이다.\n $\\mathrm{dBFS}$ 디지털에서의 0dB는 아날로그와 달리 Max Level을 의미한다. 아날로그의 Dynamic Range가 0dB이상으로 Head Room이 존재하는 것과 다르게 디지털에서의 DR은 전체에서의 최고점과 최저점이다. 결국 ADC에서 1로 변환되는 경우가 0dBFS이다.\n이를 통해 bit에 따른 디지털에서의 DR을 알 수 있는데 식으로 표현하면, $$\\mathrm{dBFS} = 20\\log_{10}(\\frac{2^n}{1})$$ 여기서의 $n$은 bit, 디지털에서의 진폭이다.\n예를 들어 24-bit 환경에서의 DR을 계산한다면, $$\\mathrm{dBFS} = 20\\log_{10}(\\frac{2^{24}}{1}) ≈ 144$$ 즉, 24-bit 환경에서의 다이나믹 레인지는 144dBFS를 가질 수 있다.\n","date":"2022-03-29T13:59:21Z","permalink":"https://donasensei.github.io/p/%EB%94%94%EC%A7%80%ED%84%B8%EC%82%AC%EC%9A%B4%EB%93%9C-db%EB%8D%B0%EC%8B%9C%EB%B2%A8/","title":"[디지털사운드] dB(데시벨)"},{"content":"Discrete Mathematics and Its Applications - Eighth Edition을 기준으로 작성.\n Propositions(명제) 우선 명제의 정의는 이렇다.\n A proposition is a declarative sentence that is either true or false\n 번역하면 True or False로 나올 수 있는 평서문이 명제가 된다.\n예로 이 문장들은 명제이다.\n The Moon is made of green cheese. $1 + 0 = 1$ $0 + 0 = 2$  첫 번째 문장의 경우 달은 녹색 치즈로 만들어졌다 라는 뜻인데, 달이 실제로 녹색 치즈인지 아닌지 알 방법은 없지만 True/False로 답할 수 있기에 명제이다.\n이 문장들은 명제가 아니다.\n What time is it? $x + 1 = 2$ $x + y = z$  이런 명제들을 나타내기 위해 **Propositional Variable(명제 변수)**를 사용한다. 통상 $p, q, r, s, \u0026hellip;$ 등이 있다.\n하나 또는 여러 명제를 조합하여 새로운 수학적 명제를 만들 수 있으며,\n이를 **복합명제(Compound Proposition)**라 한다.\n이를 만들 때 쓰이는 연산자를 **논리 연산자(Logical Operator)**라고 한다. (접속사)\n 논리 연산자(Logical Operator)    English Korean Operator     Negation 부정 $¬$   Conjunction 논리곱 $∧$   Disjunction 논리합 $∨$   Implication 조건명제 $→$   Biconditional 쌍조건문 $↔$     Negation(부정) 부정의 정의는 이렇다.\n The negation of a proposition $p$ is denoted by $¬p$ and has this truth table:\n    $p$ $¬p$     T F   F T    즉, 참이면 거짓이고, 거짓이면 참이다.\n Conjunction(논리곱) 논리곱의 정의는 이렇다.\n The conjunction of propositions $p$ and $q$ is denoted by $p ∧ q$ and has this truth table:\n    $p$ $q$ $p ∧ q$     T T T   T F F   F T F   F F F    통상 AND로 잘 알려져 있다. 즉, $p ∧ q$는 $p$와 $q$, 모두 참일 경우만 참이다.\n예를 들면, 나랑 내가 짠 코드는 버그가 없다. 라고 했을 때, \u0026lsquo;나\u0026rsquo;와 \u0026lsquo;내가 짠 코드\u0026rsquo;가 전부 버그가 없어야 참이다.\n Disjunction(논리합) 논리합의 정의는 이렇다.\n The disjunction of propositions $p$ and $q$ is denoted by $p ∨ q$ and has this truth table:\n    $p$ $q$ $p ∨ q$     T T T   T F T   F T T   F F F    통상 OR로 잘 알려져 있다. 즉, $p ∨ q$일 경우, 적어도 하나가 True일 때 성립한다. 양쪽 다 True여도 성립한다.\n한국어로 해석하면 \u0026ldquo;또는\u0026rdquo; 정도로 해석되는데 보통 \u0026ldquo;또는\u0026quot;을 배타적으로 인식하는 경향이 있다. 아래쪽에서 설명한다.\n Inclusive Or / Exclusive Or Or의 경우 두 개의 의미가 존재하는데, Inclusive Or(논리합) 와 Exclusive Or(배타적 논리합) 이다.\nInclusive Or가 위에서 설명한 논리합이다. 예를 들어, \u0026ldquo;Java 아니면 Python을 알아야 수강이 가능하다.\u0026rdquo; 일 때, Java나 Python 둘 중 하나를 알고 있거나 둘 다 알고 있을 경우에 True이기 때문에 $p ∨ q$가 성립하며 disjunction이다.\n그러나 **Exclusive Or(배타적 논리합)**의 경우 조금 차이가 있다. 배타적 논리합의 정의는 이렇다.\n In $p ⊕ q$ , one of $p$ and $q$ must be true, but not both. The truth table for $⊕$ is:\n    p q $p ⊕ q$     T T F   T F T   F T T   F F F    즉 $p$나 $q$, 중 하나는 True여야 하지만 둘 다 True일 수는 없다. 예를 들어, 게임 점검 보상으로 유료 재화 아니면 인게임 아이템으로 보상한다고 했을 때, 유료 재화나 인게임 아이템으로 보상을 받을 수는 있으나 둘 다 받을 수 있는 경우는 없다.\n Implication(조건명제) 조건명제의 정의는 이렇다.\n If p and q are propositions, then $p → q$ is a conditional statement or implication which is read as “if $p$, then $q$” and has this truth table:\n    $p$ $q$ $p → q$     T T T   T F F   F T T   F F T     \u0026lsquo;if $p$, then $q$($p$이면 $q$이다.)\u0026rsquo; \u0026lsquo;$p$ implies $q$($p$는 $q$를 함의한다.)\u0026rsquo; \u0026lsquo;$p$ is sufficient for $q$($p$는 $q$의 충분조건이다.)\u0026rsquo; \u0026lsquo;$q$ is necessary for $p$($q$는 $p$의 필요조건이다.)\u0026rsquo;  모두가 $p → q$로 표시될 수 있다.\n Converse, Contrapositive, and Inverse(역, 대우, 이)    English Korean Symbol     Converse 역 $q → p$   Contrapositive 대우 $¬q → ¬p$   Inverse 이 $¬p → ¬q$    그럼 $p → q$형태에 대해 3가지 변형된 명제를 생각 할 수 있는데 이것이\n Converse(역) Contrapositive(대우) Inverse(이) 이다.  역의 경우, $p → q$가 $q → p$가 된 형태로 명제에서 가정과 결론이 바뀐 형태이다. 예로, 명제가 If I am at home then it is raining일 경우의 역은 If I do not go to town, then it is raining이 된다.\n대우의 경우, 본래 명제와 논리 값이 같은, 근본적으로는 같은 명제라고 할 수 있다.\n만약 $p → q$가 참이면 $P ⊂ Q$인 Truth Set(진리집합)이고 그 경우 $Q^c ⊂ P^c$가 되어 $¬q → ¬p$는 참이 된다.\n이의 경우, $p → q$가 $¬p → ¬q$가 된 것으로 기존 명제의 부정인 명제이다.\n Biconditional(쌍조건문) 쌍조건문의 정의는 이렇다.\n If $p$ and $q$ are propositions, then we can form the biconditional proposition $p ↔ q$ , read as “$p$ if and only if $q$.” The biconditional $p ↔ q$ denotes the proposition with this truth table:\n    $p$ $q$ $p ↔ q$     T T T   T F F   F T F   F F T    통상 영어로 “$p$ if and only if $q$.”라고 쓰고 $p$ iff $q$처럼 쓰기도 한다. 해석하면 \u0026ldquo;오직 $p$인 경우에만(iff) $q$이다.\u0026rdquo; 이고, $p$랑 $q$는 **Equivalent Propositions(동치)**라고 하기도 한다.\n이를 다시 정리하면 $(p → q) ∧ (q → p)$라고 쓸 수 있다. 즉, $p$와 $q$의 **Truth Value(진리값)**이 같아야 True이다.\n Equivalent Propositions(동등 명제) Equivalent(동치) 동치의 정의는 이렇다.\n Two propositions are equivalent if they always have the same truth value.\n 해석하면 같은 진리값을 가진다면 동치라고 할 수 있다.\n예를 들어 조건명제와 그 대우가 동치임을 진리표로 나타낸 예시가,\n   $p$ $q$ $¬p$ $¬q$ $p → q$ $¬q → ¬p$     T T F F T T   T F F T F F   F T T F T T   F F T T T T    진리표를 보면 $p → q$와 $¬q → ¬p$의 진리값이 같기 떄문에 둘은 동치이고 대우이다.\n그리고 조건명제의 이와 역은 동치가 아닌데 이를 진리표로 나타내면,\n   $p$ $q$ $¬p$ $¬q$ $p → q$ $¬p → ¬q$ $q → p$     T T F F T T T   T F F T F T T   F T T F T F F   F F T T T T T    위와 같이 진리값이 다름을 볼 수 있다. 그렇기에 이나 역은 조견명제와 동치가 아니다. 그러나 조건명제의 역은 그 명제의 이와 동치이다.\n 논리 연산자의 우선순위    Operator Precedence     ¬ 1   ∧ 2   ∨ 3   → 4   ↔ 5    논리연산자는 순서대로 NOT, AND, OR, Implication, Biconditional 우선순위를 가진다.\n예를 들면, $¬p ∨ q → ¬r$라면 $((¬p) ∨ q) → ¬r$이다.\n","date":"2022-03-29T00:48:00+09:00","permalink":"https://donasensei.github.io/p/discrete-mathmatics-1.-propositional-logic%EB%AA%85%EC%A0%9C-%EB%85%BC%EB%A6%AC/","title":"[Discrete Mathmatics] 1. Propositional Logic(명제 논리)"},{"content":"목차  목차 헤더 텍스트 스타일 이미지 각주 블록 인용구 리스트 테이블 링크 유튜브 체크박스  코드\n1 2 3 4 5 6 7 8 9 10 11  - [목차](#목차) - [헤더](#헤더) - [텍스트 스타일](#텍스트-스타일) - [이미지](#이미지) - [각주](#각주) - [블록 인용구](#블록-인용구) - [리스트](#리스트) - [테이블](#테이블) - [링크](#링크) - [유튜브](#유튜브) - [체크박스](#체크박스)   헤더 This is Header1 =============== This is Header2 --------------- 코드\n1 2 3 4  This is Header1 =============== This is Header2 ---------------   다른 방법으로는 H1, H2, \u0026hellip;, H6에 #을 붙이는 방법이 있다.\n# Header1 ## Header2 ### Header3 #### Header4 ##### Header5 ###### Header6 코드\n1 2 3 4 5 6  # Header1 ## Header2 ### Header3 #### Header4 ##### Header5 ###### Header6   텍스트 스타일    Markdown Rendered Output     *Be Italic* Be Italic   _Be Italic_ Be Italic   **Be Bold** Be Bold   __Be Bold__ Be Bold   `Code Spans` Code Spans    코드\n1 2 3 4 5 6 7  | Markdown | Rendered Output | | :----------------- | :-------------: | | `*Be Italic*` | *Be Italic* | | `_Be Italic_` | _Be Italic_ | | `**Be Bold**` | **Be Bold** | | `__Be Bold__` | __Be Bold__ | | `` `Code Spans` `` | `Code Spans` |   이미지 이미지 첨부는 ![대체_텍스트](이미지_경로)처럼 사용한다. 코드\n1  ![DJ_MORIKUBO](https://avatars.githubusercontent.com/u/99321942?v=4)   \n이미지 크기 조절이 필요할 경우, \u0026lt;img\u0026gt;태그를 사용한다. 코드\n1  \u0026lt;img src=\u0026#34;https://avatars.githubusercontent.com/u/99321942?v=4\u0026#34; alt=\u0026#34;DJ_MORIKUBO\u0026#34; width=\u0026#34;100%\u0026#34; height=\u0026#34;auto\u0026#34;\u0026gt;   \n가운데 정렬은 \u0026lt;img\u0026gt;태그를 \u0026lt;p\u0026gt;태그로 감싸고 align=\u0026quot;center\u0026quot; 속성을 주는 방식으로 사용한다. 코드\n1  \u0026lt;p align=\u0026#34;center\u0026#34;\u0026gt;\u0026lt;img src=\u0026#34;https://avatars.githubusercontent.com/u/99321942?v=4\u0026#34; alt=\u0026#34;DJ_MORIKUBO\u0026#34;\u0026gt;\u0026lt;/p\u0026gt;   \n각주 펼쳐보기\rHow to Print in Python[^1]. How to Print in Rust[^2].\r내 환경에 작동하지 않는다.\n코드\n1 2 3 4  \u0026gt; How to Print in Python[^1]. \u0026gt; How to Print in Rust[^2]. [^1]: `print(\u0026#34;Hello, world!\u0026#34;)` [^2]: `fn main() { println!(\u0026#34;Hello, world!\u0026#34;); }`    블록 인용구  Main Blockquote\n Sub Blockquote\n SubSub Blockquote\n And so on\u0026hellip;     코드\n1 2 3 4  \u0026gt; Main Blockquote \u0026gt;\u0026gt; Sub Blockquote \u0026gt;\u0026gt;\u0026gt; SubSub Blockquote \u0026gt;\u0026gt;\u0026gt;\u0026gt; And so on...   리스트 Ordered List is\u0026hellip;\n List List List  New list New List   List   코드\n1 2 3 4 5 6 7  Ordered List is... 1. List 2. List 3. List 1. New list 2. New List 4. List   순서가 없는 경우\nUnordered List is\u0026hellip;\n List   List   List  New list   New List   List   코드\n1 2 3 4 5 6 7  Unordered List is... * List - List + List * New list - New List + List   테이블    Markdown HTML Rendered Output     [Example Link](#link) \u0026lt;a href=\u0026quot;#link\u0026quot;\u0026gt;Example Link\u0026lt;/a\u0026gt; Example Link   _Be Italic_ \u0026lt;em\u0026gt;Be Italic\u0026lt;em/\u0026gt; Be Italic   **Be Bold** \u0026lt;strong\u0026gt;Be Italic\u0026lt;strong/\u0026gt; Be Bold    테이블의 경우 개인 설정에 따라 다를 수 있다.\n\r코드\n1 2 3 4 5 6 7 8 9  \u0026lt;div class=\u0026#34;overflow-table\u0026#34; markdown=\u0026#34;block\u0026#34;\u0026gt; | Markdown | HTML | Rendered Output | | :---------------------- | :--------------------------------- | :-------------------: | | `[Example Link](#link)` | `\u0026lt;a href=\u0026#34;#link\u0026#34;\u0026gt;Example Link\u0026lt;/a\u0026gt;` | [Example Link](#Link) | | `_Be Italic_` | `\u0026lt;em\u0026gt;Be Italic\u0026lt;em/\u0026gt;` | _Be Italic_ | | `**Be Bold**` | `\u0026lt;strong\u0026gt;Be Italic\u0026lt;strong/\u0026gt;` | **Be Bold** | \u0026lt;/div\u0026gt;   링크  Basic Link : Github Open New Tab : Github{:target=\u0026quot;_blank\u0026quot;}   코드\n1 2  - Basic Link : [Github](https://github.com/donasensei) - Open New Tab : [Github](https://github.com/donasensei){:target=\u0026#34;_blank\u0026#34;}   유튜브  코드\n1  [![HIMEHINA『3分ガール』MV](https://img.youtube.com/vi/RBmWaW-3Cug/0.jpg)](https://youtu.be/RBmWaW-3Cug \u0026#34;HIMEHINA『3分ガール』MV\u0026#34;)   사실상 이미지에 링크를 걸어주는 방식이라 이런 방법도 가능하다.\n\r코드\n1 2 3 4 5 6  \u0026lt;!-- Stellar Stellar / 星街すいせい(official) --\u0026gt; \u0026lt;p align=\u0026#34;center\u0026#34;\u0026gt; \u0026lt;a href=\u0026#34;https://youtu.be/a51VH9BYzZA\u0026#34; target=\u0026#34;_blank\u0026#34;\u0026gt; \u0026lt;img src=\u0026#34;https://img.youtube.com/vi/a51VH9BYzZA/0.jpg\u0026#34; alt=\u0026#34;Stellar Stellar / 星街すいせい(official)\u0026#34; width=\u0026#34;100%\u0026#34; height=\u0026#34;auto\u0026#34;\u0026gt; \u0026lt;/a\u0026gt; \u0026lt;/p\u0026gt;   \n\r그럼에도 iframe이 제일 편하고 좋다.\n코드\n1 2  \u0026lt;!-- 『眩しいDNAだけ』 --\u0026gt; \u0026lt;iframe width=\u0026#34;560\u0026#34; height=\u0026#34;315\u0026#34; src=\u0026#34;https://www.youtube.com/embed/VJy8qZ77bpE\u0026#34; title=\u0026#34;YouTube video player\u0026#34; frameborder=\u0026#34;0\u0026#34; allow=\u0026#34;accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\u0026#34; allowfullscreen\u0026gt;\u0026lt;/iframe\u0026gt;   체크박스  CheckBox(False) CheckBox(True)  코드\n1 2  - [ ] CheckBox(False) - [x] CheckBox(True)   \n여기서부터 각주\n","date":"2022-03-27T02:10:00+09:00","permalink":"https://donasensei.github.io/p/kramdown-%EC%9E%91%EC%84%B1%EB%B2%95/","title":"Kramdown 작성법"}]